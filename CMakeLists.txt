cmake_minimum_required(VERSION 3.20 FATAL_ERROR)
project(RcppPlanc VERSION 0.8.3 LANGUAGES C CXX)
include(CheckIncludeFile)
include(CheckCXXCompilerFlag)
include(cmake/CPM.cmake)
include(cmake/FindR.cmake)
include(cmake/FindRModule.cmake)


find_package(HDF5 COMPONENTS CXX REQUIRED)
find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)
if(NOT (APPLE AND (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES arm64)))
find_package(OpenMP)
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_FLAGS_RELEASE "")
set(CMAKE_CXX_FLAGS_RELEASE "")
set(CMAKE_VERBOSE_MAKEFILE TRUE)

add_library(RcppPlanc SHARED "${PROJECT_SOURCE_DIR}/src/rcppplanc_nmf.cpp" "${PROJECT_SOURCE_DIR}/src/RcppExports.cpp")
set_target_properties(RcppPlanc PROPERTIES PREFIX "")
if(APPLE)
set_target_properties(RcppPlanc PROPERTIES SUFFIX ".so")
endif()
target_include_directories(RcppPlanc
PRIVATE "${PROJECT_SOURCE_DIR}/src/common;${PROJECT_SOURCE_DIR}/src/nnls;${PROJECT_SOURCE_DIR}/src/nmf")

find_r_module(Rcpp)
find_r_module(RcppArmadillo)
find_r_module(RcppProgress)

if(R_INCLUDE_DIR)
target_include_directories(RcppPlanc PRIVATE "${R_INCLUDE_DIR}")
else()
message(FATAL_ERROR "missing R headers")
endif()
if(R_RCPP)
target_include_directories(RcppPlanc PRIVATE "${R_RCPP}/include")
else()
message(FATAL_ERROR "missing RcppArmadillo")
endif()
if(R_RCPPARMADILLO)
target_include_directories(RcppPlanc PRIVATE "${R_RCPPARMADILLO}/include")
else()
message(FATAL_ERROR "missing RcppArmadillo")
endif()
if(R_RCPPPROGRESS)
target_include_directories(RcppPlanc PRIVATE "${R_RCPPPROGRESS}/include")
else()
message(FATAL_ERROR "missing RcppProgress")
endif()

CPMAddPackage(NAME HighFive
              GIT_TAG master
              GITHUB_REPOSITORY BlueBrain/HighFive
              OPTIONS "HIGHFIVE_EXAMPLES OFF" "HIGHFIVE_BUILD_DOCS OFF" "HIGHFIVE_USE_BOOST OFF")


target_link_libraries(RcppPlanc PUBLIC hdf5::hdf5_cpp BLAS::BLAS LAPACK::LAPACK HighFive)

if(OpenMP_CXX_FOUND)
target_compile_options(RcppPlanc PRIVATE ${OpenMP_CXX_FLAGS})
target_include_directories(RcppPlanc PRIVATE ${OpenMP_CXX_INCLUDE_DIRS})
endif()

check_cxx_compiler_flag("-funsafe-math-optimizations" UNSAFE_MATH)
if(UNSAFE_MATH)
    target_compile_options(RcppPlanc PRIVATE "-funsafe-math-optimizations")
endif()
check_cxx_compiler_flag("-ffinite-math-only" FINITE_MATH)
if(FINITE_MATH)
    target_compile_options(RcppPlanc PRIVATE "-ffinite-math-only")
endif()
check_cxx_compiler_flag("-fno-trapping-math" TRAPPING_MATH)
if(TRAPPING_MATH)
    target_compile_options(RcppPlanc PRIVATE "-fno-trapping-math")
endif()
check_cxx_compiler_flag("-fno-math-errno" ERRNO_MATH)
if(ERRNO_MATH)
    target_compile_options(RcppPlanc PRIVATE "-fno-math-errno")
endif()
check_cxx_compiler_flag("-fno-signed-zeros" UNSIGNED_ZERO)
if(UNSIGNED_ZERO)
    target_compile_options(RcppPlanc PRIVATE "-fno-signed-zeros")
endif()
check_cxx_compiler_flag("-freciprocal-math" RECIPROCAL_MATH)
if(RECIPROCAL_MATH)
    target_compile_options(RcppPlanc PRIVATE "-freciprocal-math")
endif()

if(NOT APPLE)
check_include_file("cblas.h" CBLAS_HEADER)
if(CBLAS_HEADER)
else()
check_include_file("flexiblas/cblas.h" FLEXIBLAS_HEADER)
if(FLEXIBLAS_HEADER)
target_compile_definitions(RcppPlanc PRIVATE "HAVE_FLEXIBLAS_CBLAS_H")
else()
check_include_file("openblas/cblas.h" OPENBLAS_HEADER)
if(OPENBLAS_HEADER)
target_compile_definitions(RcppPlanc PRIVATE "HAVE_OPENBLAS_CBLAS_H")
else()
message(FATAL_ERROR "no cblas header")
endif()
endif()
endif()
endif()
